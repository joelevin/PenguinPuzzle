package {	import Cave;	import CustomClick;	import Orca;	import Penguin;	import Main;	import flash.events.MouseEvent;	import flash.ui.Mouse;	import flash.display.MovieClip;	import flash.events.Event;	import flash.display.Stage;		public class Game extends MovieClip	{		private var foreground:Foreground;				public var pinguino:Penguin;		private var orca:Orca;		private var cave:Cave;		private var numOfCaves:uint = 3;		private var caves:Array;		private var bigArrow:ArrowMC;		private var replayButton:CustomClick;				private var stageRef:Stage;				public function Game(stageRef:Stage)		{			// constructor code			this.stageRef = stageRef;		}				public function init():void		{			trace("init");			foreground = new Foreground();			pinguino = new Penguin();			orca = new Orca();			cave = new Cave();			bigArrow = new ArrowMC();			caves = new Array(numOfCaves);			replayButton = new CustomClick(50, 50, 1, 1, 0xFF0000,"REPLAY",10,0x000000);						createMouseInput();			drawUI();		}				/*private function addedToStageHandler(e:Event = null):void		{			trace("added to stage");			stageRef = stage;					}*/				private function drawUI():void		{			drawForeground();			drawPenguin();			drawOrca();			createCaves();		}				private function createReplayButton():void		{			stageRef.addChild(replayButton);			replayButton.x = stageRef.stageWidth - 100;			replayButton.y = stageRef.stageHeight - 75;						replayButton.addEventListener(MouseEvent.CLICK,replayHandler);		}				private function replayHandler(m:MouseEvent):void		{			replay();		}				private function replay():void		{						/*			stageRef.removeEventListener(MouseEvent.CLICK,mouseClickHandler);			stageRef.removeEventListener(MouseEvent.MOUSE_MOVE,mouseMovementHandler);			stageRef.removeEventListener(Event.ENTER_FRAME, movePenguin);			this.removeEventListener(Event.ADDED_TO_STAGE,addedToStageHandler);									pinguino = null;			orca = null;			cave = null;			caves = null;			bigArrow = null;			foreground = null;									var resetChildren:uint = stageRef.numChildren;			for (var i:int = 0; i < resetChildren; i++)			{				stageRef.removeChildAt(0);				trace("stageRef.numChildren " + stageRef.numChildren);				trace("resetChildren " + resetChildren);			}						//stageRef = null;			replayButton = null;			addedToStageHandler();					*/			//this.parent.initializeGame();		}				private function createMouseInput():void		{			stageRef.addEventListener(MouseEvent.MOUSE_MOVE,mouseMovementHandler);			stageRef.addEventListener(MouseEvent.CLICK,mouseClickHandler);		}				private function mouseMovementHandler(m:MouseEvent):void		{			if(mouseX >= 0 && mouseX < 180)			{				stageRef.addChild(bigArrow);				bigArrow.x = 100 - bigArrow.width / 2;				bigArrow.y = 90;			}			else if (mouseX >= 180 && mouseX < 380)			{				stageRef.addChild(bigArrow);				bigArrow.x = 300 - bigArrow.width / 2;				bigArrow.y = 90;			}			else if (mouseX >= 380 && mouseX < stageRef.stageWidth)			{				//stageRef.addChild(bigArrow);				bigArrow.x = 500 - bigArrow.width / 2;				bigArrow.y = 90;			}			else			{				if(bigArrow.parent != null)				{					stageRef.removeChild(bigArrow);				}			}				}				private function mouseClickHandler(e:Event):void		{			if(mouseX >= 0 && mouseX < 180)			{				pinguino.destination = 1;				stageRef.addEventListener(Event.ENTER_FRAME, movePenguin);			}			else if (mouseX >= 180 && mouseX < 380)			{				pinguino.destination = 2;				stageRef.addEventListener(Event.ENTER_FRAME, movePenguin);			}			else if (mouseX >= 380 && mouseX < stageRef.stageWidth)			{				pinguino.destination = 3;				stageRef.addEventListener(Event.ENTER_FRAME, movePenguin);			}		}				private function movePenguin(e:Event):void		{			//moves penguin to the left-most cave			if (pinguino.destination == 1 && pinguino.penguinMC.y > 190)			{				pinguino.penguinMC.x -= 4.3;				pinguino.penguinMC.y -= 2;								checkCollision(100);			}			//moves penguin to the center cave			else if (pinguino.destination == 2 && pinguino.penguinMC.y > 190)			{				pinguino.penguinMC.y -= 4;								checkCollision(300);			}			//moves penguin to the right-most cave			else if (pinguino.destination == 3 && pinguino.penguinMC.y > 190)			{				pinguino.penguinMC.x += 4.6;				pinguino.penguinMC.y -= 2;								checkCollision(500);			}		}				private function checkCollision(xPos:Number):void		{						if (orca.orcaMC.hitTestObject(pinguino.penguinMC))				{					orca.orcaMC.gotoAndStop(2);					stageRef.removeChild(pinguino.penguinMC);					pinguino.alive = false;					//createReplayButton();					trace("collision");				}		}				/*		private function drawArrow():void		{			stageRef.addChild(bigArrow);			bigArrow.y = 90;		}*/				private function drawForeground():void		{			stageRef.addChild(foreground);			foreground.y = stageRef.stageHeight - 100;		}				private function drawPenguin():void		{			stageRef.addChild(pinguino.penguinMC);			pinguino.penguinMC.x = (stage.stageWidth / 2) - (pinguino.penguinMC.width / 2);			pinguino.penguinMC.y = foreground.y - 10;		}				private function createCaves():void		{			for (var i:uint = 0; i < numOfCaves; i++)			{				cave = new Cave();				caves.push(cave);				stageRef.addChild(cave.caveMC);				cave.caveMC.y = 100;				cave.caveMC.x = i * 200;			}		}				private function drawOrca():void		{			stageRef.addChild(orca.orcaMC);			orca.orcaMC.y = 100 + cave.caveMC.height - orca.orcaMC.height;  //place orca in vertical line with the caves			placeOrca(orca.assignment);		}				private function placeOrca(assignment:uint):void		{			trace("Orca assignment: " + orca.assignment);			switch(assignment)			{				case 1:				orca.orcaMC.x = 0 + cave.caveMC.width / 2 - orca.orcaMC.width / 2;				break;				case 2:				orca.orcaMC.x = 200 + cave.caveMC.width / 2 - orca.orcaMC.width / 2;				break;				case 3:				orca.orcaMC.x = 400 + cave.caveMC.width / 2 - orca.orcaMC.width / 2;				break;			}		}	}}